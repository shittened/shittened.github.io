export function AniAscii(content, arg) {
    const asciis = [
        [
            '⣿⡇⠄⡴⠁⡜⣵⢗⢀⠄⢠⡔⠁⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄',
            '⣿⡇⡜⠄⡜⠄⠄⠄⠉⣠⠋⠠⠄⢀⡄⠄⠄⣠⣆⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⢸',
            '⣿⠸⠄⡼⠄⠄⠄⠄⢰⠁⠄⠄⠄⠈⣀⣠⣬⣭⣛⠄⠁⠄⡄⠄⠄⠄⠄⠄⢀⣿',
            '⣏⠄⢀⠁⠄⠄⠄⠄⠇⢀⣠⣴⣶⣿⣿⣿⣿⣿⣿⡇⠄⠄⡇⠄⠄⠄⠄⢀⣾⣿',
            '⣿⣸⠈⠄⠄⠰⠾⠴⢾⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⢁⣾⢀⠁⠄⠄⠄⢠⢸⣿⣿',
            '⣿⣿⣆⠄⠆⠄⣦⣶⣦⣌⣿⣿⣿⣿⣷⣋⣀⣈⠙⠛⡛⠌⠄⠄⠄⠄⢸⢸⣿⣿',
            '⣿⣿⣿⠄⠄⠄⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠈⠄⠄⠄⠄⠄⠈⢸⣿⣿',
            '⣿⣿⣿⠄⠄⠄⠘⣿⣿⣿⡆⢀⣈⣉⢉⣿⣿⣯⣄⡄⠄⠄⠄⠄⠄⠄⠄⠈⣿⣿',
            '⣿⣿⡟⡜⠄⠄⠄⠄⠙⠿⣿⣧⣽⣍⣾⣿⠿⠛⠁⠄⠄⠄⠄⠄⠄⠄⠄⠃⢿⣿',
            '⣿⡿⠰⠄⠄⠄⠄⠄⠄⠄⠄⠈⠉⠩⠔⠒⠉⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠐⠘⣿'
        ],
        [
            '⣿⡇⣿⣿⣿⠛⠁⣴⣿⡿⠿⠧⠹⠿⠘⣿⣿⣿⡇⢸⡻⣿⣿⣿⣿⣿⣿⣿',
            '⢹⡇⣿⣿⣿⠄⣞⣯⣷⣾⣿⣿⣧⡹⡆⡀⠉⢹⡌⠐⢿⣿⣿⣿⡞⣿⣿⣿',
            '⣾⡇⣿⣿⡇⣾⣿⣿⣿⣿⣿⣿⣿⣿⣄⢻⣦⡀⠁⢸⡌⠻⣿⣿⣿⡽⣿⣿',
            '⡇⣿⠹⣿⡇⡟⠛⣉⠁⠉⠉⠻⡿⣿⣿⣿⣿⣿⣦⣄⡉⠂⠈⠙⢿⣿⣝⣿',
            '⠤⢿⡄⠹⣧⣷⣸⡇⠄⠄⠲⢰⣌⣾⣿⣿⣿⣿⣿⣿⣶⣤⣤⡀⠄⠈⠻⢮',
            '⠄⢸⣧⠄⢘⢻⣿⡇⢀⣀⠄⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡀⠄⢀',
            '⠄⠈⣿⡆⢸⣿⣿⣿⣬⣭⣴⣿⣿⣿⣿⣿⣿⣿⣯⠝⠛⠛⠙⢿⡿⠃⠄⢸',
            '⠄⠄⢿⣿⡀⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⡾⠁⢠⡇⢀',
            '⠄⠄⢸⣿⡇⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣏⣫⣻⡟⢀⠄⣿⣷⣾',
            '⠄⠄⢸⣿⡇⠄⠈⠙⠿⣿⣿⣿⣮⣿⣿⣿⣿⣿⣿⣿⣿⡿⢠⠊⢀⡇⣿⣿',
            '⠒⠤⠄⣿⡇⢀⡲⠄⠄⠈⠙⠻⢿⣿⣿⠿⠿⠟⠛⠋⠁⣰⠇⠄⢸⣿⣿⣿'
        ],
        [
            '⣽⣿⢣⣿⡟⣽⣿⣿⠃⣲⣿⣿⣸⣷⡻⡇⣿⣿⢇⣿⣿⣿⣏⣎⣸⣦⣠⡞⣾⢧⣿⣿',
            '⣿⡏⣿⡿⢰⣿⣿⡏⣼⣿⣿⡏⠙⣿⣿⣤⡿⣿⢸⣿⣿⢟⡞⣰⣿⣿⡟⣹⢯⣿⣿⣿', 
            '⡿⢹⣿⠇⣿⣿⣿⣸⣿⣿⣿⣿⣦⡈⠻⣿⣿⣮⣿⣿⣯⣏⣼⣿⠿⠏⣰⡅⢸⣿⣿⣿', 
            '⡀⣼⣿⢰⣿⣿⣇⣿⣿⡿⠛⠛⠛⠛⠄⣘⣿⣿⣿⣿⣿⣿⣶⣿⠿⠛⢾⡇⢸⣿⣿⣿', 
            '⠄⣿⡟⢸⣿⣿⢻⣿⣿⣷⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⡋⠉⣠⣴⣾⣿⡇⣸⣿⣿⡏', 
            '⠄⣿⡇⢸⣿⣿⢸⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣄⠘⢿⣿⠏⠄⣿⣿⣿⣹', 
            '⠄⢻⡇⢸⣿⣿⠸⣿⣿⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣦⣼⠃⠄⢰⣿⣿⢯⣿', 
            '⠄⢸⣿⢸⣿⣿⡄⠙⢿⣿⣿⡿⠁⠄⠄⠄⠄⠉⣿⣿⣿⣿⣿⣿⡏⠄⢀⣾⣿⢯⣿⣿',
            '⣾⣸⣿⠄⣿⣿⡇⠄⠄⠙⢿⣀⠄⠄⠄⠄⠄⣰⣿⣿⣿⣿⣿⠟⠄⠄⣼⡿⢫⣻⣿⣿',
            '⣿⣿⣿⠄⢸⣿⣿⠄⠄⠄⠄⠙⠿⣷⣶⣤⣴⣿⠿⠿⠛⠉⠄⠄ ⢸⣿⣿⣿⣿⠃⣴'
        ],
        [
            '⣿⣿⣿⣿⣿⣿⣿⣿⠿⢟⣛⣭⣽⣿⣿⣿⣷⡆⣠⣾⣿⣿⣿⣿⣶⣮⣽⣛⠿⢿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⣿⣿⣿⣿⣿⠿⠋⠀⠘⠛⠉⠻⠿⣿⣿⣿⣏⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣭⣛⠿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣟⣁⣤⣄⣉⡙⠿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣥⣄⣀⡀⠀⢀⣀⠄⠀⠀⠀⠀⠀⠀⠀⠀',
            '⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣝⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢿⣿⣿⣷⣮⡙⠿⣿⣿⣿⣿⣿⣿⣿⣷⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⠀⠀⠀⠀⢀⣀⣀⣀⣀⣀⣀⣤⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣌⠛⠿⣿⣷⣆⠈⠻⢿⣿⣿⣿⣟⠻⠿⣷⡀⠀⠀⠀⠀⠀⠀⠀⣴',
            '⠀⠀⠀⠀⣿⡟⣿⣿⣿⣿⡟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠻⣷⡈⢯⡟⣿⣆⢂⡀⢻⣿⣿⠻⣷⣄⠘⢷⠀⠀⠀⠀⠀⠰⣶⠟',
            '⠀⠀⠀⢰⣿⢠⣿⣿⣿⣿⡇⣿⣿⢿⣟⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣵⡙⣿⡄⠑⣿⣿⣖⢦⠘⡮⢻⣧⠈⢻⣆⡘⠀⠀⠀⠀⠀⠀⢻⣿',
            '⠀⠀⣠⣿⣿⢸⣿⣿⣿⣿⡇⢿⣿⢻⡇⣅⠻⣿⣿⣿⣿⡿⢿⣿⣿⡿⣷⠘⡇⢱⣦⠻⣿⣆⡆⢰⡌⢿⣧⠈⡏⢧⠀⠀⠀⠀⠀⡀⠀⠻',
            '⣠⣾⣿⣿⣿⢸⣿⣿⣿⣿⡇⢻⣷⣼⠃⣽⠀⠈⠻⣿⣿⡏⢨⢹⣿⢻⣿⡆⢁⣨⣿⣤⠈⣛⠷⠘⠰⢄⢿⠇⢹⣾⠀⠀⠀⠀⠀⠈⠀⠀',
            '⣿⣿⣿⣿⡿⠸⣿⠙⣿⣿⡇⢸⣿⣿⠀⠋⢀⣡⣄⠰⠿⣷⠘⣿⣿⠸⣿⡇⠀⠉⠀⠈⠀⠙⠂⠀⣿⡞⢸⣼⠸⠃⠀⠀⠀⠀⠀⠀⠀⠀',
            '⣿⣿⡿⠹⡟⠀⢻⣆⠸⣿⡇⠈⣿⠟⠀⡔⠜⢡⢿⣷⣄⢻⡇⢹⣿⣽⠟⠀⣤⣤⡀⠙⣆⠀⠈⢰⢇⠀⣾⠋⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⢿⡏⣿⠘⣏⡆⢸⡏⣷⡜⢷⡇⠈⠜⠀⠀⣀⡀⠀⠈⠙⡆⠇⢸⣿⠁⣠⠐⡿⠿⠗⠠⣿⣆⡀⡼⠋⣸⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⣼⢃⣿⠀⡗⣿⠘⢧⢸⣿⣾⣿⡀⠀⠀⢸⣿⣿⡆⠆⣷⡧⠠⠈⣡⣼⣿⣿⠩⣤⠤⠠⢟⣸⠀⡠⠀⢋⣴⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⣏⡀⢻⡇⢷⣿⡆⣌⠀⠹⣿⣿⡣⠀⢠⣴⡍⠉⠀⠙⣿⣿⣶⣾⣿⣿⣿⣿⣧⣤⣤⡴⢞⢿⠈⢠⡴⣿⣿⠀⠀⠀⠀⠀⣀⣀⠀⠀⠀⠀',
            '⣿⣿⣦⡁⠈⠻⣧⠘⡄⣤⡘⠳⣴⣶⣄⡻⣤⡙⣉⣨⣽⣿⣿⣿⣿⣿⡿⢿⣿⣿⣿⣾⣾⠆⡄⠘⡇⣿⣿⢀⣤⣴⣾⣿⣝⠿⡇⠀⠀⠀',
            '⣿⣿⣿⣿⣦⣀⣉⠂⠀⠹⣿⣦⢈⡉⠉⠳⠌⠻⢿⣧⣹⣿⣿⣿⡏⢴⡆⣼⣿⣿⣿⡿⠋⠰⠀⠀⢉⣿⢃⣛⢿⣿⣿⣿⣿⣷⣅⠀⠀⠀',
            '⣿⣿⣿⣿⣿⣿⣿⣷⣦⣄⠙⢿⣾⣿⡽⣶⡄⠙⠻⢿⣿⣿⣿⣿⣿⣶⡖⢉⠻⠛⣠⡖⢀⡄⠀⢀⡾⢃⣾⣿⣷⣌⠻⣿⣿⣿⣿⠀⠀⠀',
            '⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡈⠻⣿⣿⣌⢿⣄⠰⣦⣤⡉⠉⠉⠙⢛⣋⠌⠻⣦⣙⠻⣿⠇⠀⠈⠀⣾⣿⣿⣿⣿⣿⣌⠻⣿⡟⠀⠀⠀',
            '⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢿⣷⣤⢉⠻⠦⠙⢷⡔⠨⣍⣛⠳⡆⢰⣶⣿⡇⡌⡝⠷⣮⡀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣷⡙⠇⠀⠀⠀',
            '⣿⣿⣿⣿⣿⣿⡿⣋⣥⣶⣶⣶⣶⣦⢙⠻⣶⣶⣤⣭⣑⣈⠉⣀⡁⣀⢻⣿⠘⢃⡴⢛⣲⣶⣤⡀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀',
            '⣿⣿⣿⣿⣿⢋⣶⣌⠻⣿⣿⣿⣿⣿⢸⣿⣦⣝⠿⣿⣿⡿⢸⣿⣷⡘⣆⠋⣀⠚⢡⡿⣩⣭⣭⣿⡎⢷⣦⠹⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀',
            '⣿⡿⣿⣿⠇⣼⣿⣿⣷⣌⣿⣿⣿⣿⢸⣿⣿⣿⣷⣌⠻⡇⠙⠛⠛⠛⠘⠃⠙⠀⠈⠕⡏⢰⡌⣿⣿⡌⢿⣷⡈⢿⣿⡻⣿⣿⠀⠀⠀⠀',
            '⣿⣷⣾⣭⣤⣍⠻⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⠋⠀⣀⠀⣴⣶⣶⠀⠀⠀⢢⣶⣄⠐⢿⣇⢹⣿⣿⡜⢿⣿⣌⢿⣿⣦⡙⠀⠀⠀⠀',
            '⣿⣿⣿⣿⣿⣿⣇⢻⣿⣿⣿⣿⣿⣿⣶⣭⣛⡻⢿⠀⢸⣿⣇⢻⡿⠃⠀⣷⠀⠀⠙⢿⣿⠂⠈⠀⣿⣿⡟⣤⡛⠻⣦⠻⣿⣷    ' 
        ],
        [
            '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠶⠚⠉⢉⣩⠽⠟⠛⠛⠛⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠉⠀⢀⣠⠞⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡞⠁⠀⠀⣰⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⡼⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⡤⠤⠄⢤⣄⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⢰⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠴⠒⠋⠉⠀⠀⠀⣀⣤⠴⠒⠋⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀',
            '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⡄⠀⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⢳⡄⢀⡴⠚⠉⠀⠀⠀⠀⠀⣠⠴⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠘⣧⠀⠀⠀⠀⠀⠀⠀⠀⣰⠃⠀⠀⠹⡏⠀⠀⠀⠀⠀⣀⣴⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⢬⣳⣄⣠⠤⠤⠶⠶⠒⠋⠀⠀⠀⠀⠹⡀⠀⠀⠀⠀⠈⠉⠛⠲⢦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠤⠖⠋⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠱⡀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠉⢳⠦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⠀⠀⠀⠀⠀⠀⠀⠀⣠⠖⠋⠀⠀⠀⣠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢱⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⠀⢃⠈⠙⠲⣄⡀⠀⠀⠀⠀⠀⠀⠀',
            '⠀⠀⠀⠀⠀⠀⢠⠞⠁⠀⠀⠀⢀⢾⠃⠀⠀⠀⠀⠀⠀⠀⠀⢢⠀⠀⠀⠀⠀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⣹⠮⣄⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀',
            '⠀⠀⠀⠀⠀⣰⠋⠀⠀⢀⡤⡴⠃⠈⠦⣀⠀⠀⠀⠀⠀⠀⢀⣷⢸⠀⠀⠀⠀⢀⣀⠘⡄⠤⠤⢤⠔⠒⠂⠉⠁⠀⠀⠀⠑⢄⡀⠀⠀⠙⢦⡀⠀⠀⠀',
            '⠀⠀⠀⠀⣼⠃⠀⠀⢠⣞⠟⠀⠀⠀⡄⠀⠉⠒⠢⣤⣤⠄⣼⢻⠸⠀⠀⠀⠀⠉⢤⠀⢿⡖⠒⠊⢦⠤⠤⣀⣀⡀⠀⠀⠀⠈⠻⡝⠲⢤⣀⠙⢦⠀⠀',
            '⠀⠀⠀⢰⠃⠀⠀⣴⣿⠎⠀⠀⢀⣜⠤⠄⢲⠎⠉⠀⠀⡼⠸⠘⡄⡇⠀⠀⠀⠀⢸⠀⢸⠘⢆⠀⠘⡄⠀⠀⠀⢢⠉⠉⠀⠒⠒⠽⡄⠀⠈⠙⠮⣷⡀',
            '⠀⠀⠀⡟⠀⠀⣼⢻⠧⠐⠂⠉⡜⠀⠀⡰⡟⠀⠀⠀⡰⠁⡇⠀⡇⡇⠀⠀⠀⠀⢺⠇⠀⣆⡨⢆⠀⢽⠀⠀⠀⠈⡷⡄⠀⠀⠀⠀⠹⡄⠀⠀⠀⠈⠁',
            '⠀⠀⢸⠃⠀⠀⢃⠎⠀⠀⠀⣴⠃⠀⡜⠹⠁⠀⠀⡰⠁⢠⠁⠀⢸⢸⠀⠀⠀⢠⡸⢣⠔⡏⠀⠈⢆⠀⣗⠒⠀⠀⢸⠘⢆⠀⠀⠀⠀⢳⠀⠀⠀⠀⠀',
            '⠀⠀⢸⠀⠀⠀⡜⠀⠀⢀⡜⡞⠀⡜⠈⠏⠀⠈⡹⠑⠒⠼⡀⠀⠀⢿⠀⠀⠀⢀⡇⠀⢇⢁⠀⠀⠈⢆⢰⠀⠀⠀⠈⡄⠈⢢⠀⠀⠀⠈⣇⠀⠀⠀⠀',
            '⠀⠀⢸⡀⠀⢰⠁⠀⢀⢮⠀⠇⡜⠀⠘⠀⠀⢰⠃⠀⠀⡇⠈⠁⠀⢘⡄⠀⠀⢸⠀⠀⣘⣼⠤⠤⠤⣈⡞⡀⠀⠀⠀⡇⠰⡄⢣⡀⠀⠀⢻⠀⠀⠀⠀',
            '⠀⠀⠈⡇⠀⡜⠀⢀⠎⢸⢸⢰⠁⠀⠄⠀⢠⠃⠀⠀⢸⠀⠀⠀⠀⠀⡇⠀⠀⡆⠀⠀⣶⣿⡿⠿⡛⢻⡟⡇⠀⠀⠀⡇⠀⣿⣆⢡⠀⠀⢸⡇⠀⠀⠀',
            '⠀⠀⢠⡏⠀⠉⢢⡎⠀⡇⣿⠊⠀⠀⠀⢠⡏⠀⠀⠀⠎⠀⠀⠀⠀⠀⡇⠀⡸⠀⠀⠀⡇⠀⢰⡆⡇⢸⢠⢹⠀⠀⠀⡇⠀⢹⠈⢧⣣⠀⠘⡇⠀⠀⠀',
            '⠀⠀⢸⡇⠀⠀⠀⡇⠀⡇⢹⠀⠀⠀⢀⡾⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⢠⠃⠀⠀⠠⠟⡯⣻⣇⢃⠇⢠⠏⡇⠀⢸⡆⠀⢸⠀⠈⢳⡀⠀⡇⠀⠀⠀',
            '⠀⠀⠀⣇⠀⡔⠋⡇⠀⢱⢼⠀⠀⡂⣼⡇⢹⣶⣶⣶⣤⣤⣀⠀⠀⠀⣇⠇⠀⠀⠀⠀⣶⡭⢃⣏⡘⠀⡎⠀⠇⠀⡾⣷⠀⣼⠀⠀⠀⢻⡄⡇⠀⠀⠀',
            '⠀⠀⠀⣹⠜⠋⠉⠓⢄⡏⢸⠀⠀⢳⡏⢸⠹⢀⣉⢭⣻⡽⠿⠛⠓⠀⠋⠀⠀⠀⠀⠀⠘⠛⠛⠓⠀⡄⡇⠀⢸⢰⡇⢸⡄⡟⠀⠀⠀⠀⢳⡇⠀⠀⠀',
            '⠀⣠⠞⠁⠀⠀⠀⠀⠀⢙⠌⡇⠀⣿⠁⠀⡇⡗⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⠀⠀⠀⠀⠀⠀⠁⠁⠀⢸⣼⠀⠈⣇⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⢸⠁⠀⠀⢀⡠⠔⠚⠉⠉⢱⣇⢸⢧⠀⠀⠸⣱⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⡤⠦⡔⠀⠀⠀⠀⠀⢀⡼⠀⠀⣼⡏⠀⠀⢹⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⢸⠀⠀⠀⠋⠀⠀⠀⢀⡠⠤⣿⣾⣇⣧⠀⠀⢫⡆⠀⠀⠀⠀⠀⠀⠀⢨⠀⠀⣠⠇⠀⠀⢀⡠⣶⠋⠀⠀⡸⣾⠁⠀⠀⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⢸⡄⠀⠀⠀⠀⠠⠊⠁⠀⠀⢸⢃⠘⡜⡵⡀⠈⢿⡱⢲⡤⠤⢀⣀⣀⡀⠉⠉⣀⡠⡴⠚⠉⣸⢸⠀⠀⢠⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⠀⢧⠀⠀⠀⠀⠀⠀⠀⣀⠤⠚⠚⣤⣵⡰⡑⡄⠀⢣⡈⠳⡀⠀⠀⠀⢨⡋⠙⣆⢸⠀⠀⣰⢻⡎⠀⠀⡎⡇⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⠀⠈⢷⡀⠀⠀⠀⠀⠀⠁⠀⠀⠀⡸⢌⣳⣵⡈⢦⡀⠳⡀⠈⢦⡀⠀⠘⠏⠲⣌⠙⢒⠴⡧⣸⡇⠀⡸⢸⠇⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⠀⠀⢠⣿⠢⡀⠀⠀⠀⠠⠄⡖⠋⠀⠀⠙⢿⣳⡀⠑⢄⠹⣄⡀⠙⢄⡠⠤⠒⠚⡖⡇⠀⠘⣽⡇⢠⠃⢸⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⠀⠀⣾⠃⠀⠀⠀⠀⠀⢀⡼⣄⠀⠀⠀⠀⠀⠑⣽⣆⠀⠑⢝⡍⠒⠬⢧⣀⡠⠊⠀⠸⡀⠀⢹⡇⡎⠀⡿⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⠀⡼⠁⠀⠀⠀⠀⠀⠀⢀⠻⣺⣧⠀⠀⠀⠰⢢⠈⢪⡷⡀⠀⠙⡄⠀⠀⠱⡄⠀⠀⠀⢧⠀⢸⡻⠀⢠⡇⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
            '⢰⠇⠀⠀⠀⠀⠀⠀⠀⢸⠀⡏⣿⠀⠀⠀⠀⢣⢇⠀⠑⣄⠀⠀⠸⡄⠀⠀⠘⡄⠀⠀⠸⡀⢸⠁⠀⡾⢰⡏⢳⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀'
        ],
    ]
    let output = '<div class = "output">'

    if(arg[1] == null) {
        Open(true)
    }
    else {
        switch(arg[1]) {
            case '--help':
            case '-h':
                Help()
                break

            case '-l':
                List()
                break

            case '-i':
                Open(false, arg[2])
                break

            default:
                Open(true, 0)
        }
    }

    output += '</div>'
    content.innerHTML += output

    function Open(random, index) {

        if(random) {
            index = Math.floor(Math.random() * asciis.length)
        }

        if(isNaN(index) || (0 > index) || (index > asciis.length)) {
            output += 'Not a valid index. See -l for indexes'
            return
        }

        output += '<pre>'
        for(let i = 0; i < asciis[index].length; i++) {
            asciis[index][i] += '<br>'
            output += asciis[index][i]
        }

        output += '</pre>'
    }

    function List() {
        for(let j = 0; j < asciis.length; j ++) {
            output += j + ':<br>'
            Open(false, j)
        }
    }

    function Help() {
        const help = [
            'ani-ascii - anime ascii',
            'Usage:',
            'no flags - random anime ascii',
            '-l - list asciis and their index numbers',
            '-i - show ascii by index number '
        ]

        help.forEach(line => {
            output += line + '<br>'
        })
    }
}
